# -*- coding:utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt

import map_interface as mif

g_flag_ref_line_begin = False
g_flag_ref_line_end = False
g_point_x = 0
g_point_y = 0
g_slide_window = 0


# def onMotion(event):
#   x=event.xdata
#   y=event.ydata
#   visible = ann.get_visible()
#   if event.inaxes == ax:
#     contain, _ = ref_line.contains(event)
#     if contain:
#       plt.plot(x,y,'ro')
#       ann.xy = (x,y)
#       ann.set_text(str(y))
#       ann.set_visible(True)
#     else:
#       if visible:
#         ann.set_visible(False)
#     event.canvas.draw_idle()

class MapModify:
  def __init__(self, fig):
    self.fig = fig
    self.get_ref_line_flag = False
    self.rect_x = 0
    self.rect_y = 0
    self.ref_line_dict = {}
    self.ref_line_list = []
    self.road_id_list = []
    self.road_id = 0
    self.ax = self.fig.gca()
    self.ann = self.ax.annotate("", xy=(0,0), xytext=(-50,50), textcoords="offset pixels", 
                      bbox=dict(boxstyle="round", fc='r'), arrowprops=dict(arrowstyle="<->"))
    self.ann.set_text("select point by drag")


  def onButtonPress(self, event):
    if event.button == 1: # 单击左键
      x = event.xdata
      y = event.ydata
      
      if self.get_ref_line_flag and len(self.ref_line_list)>0: # 选点结束
        self.ann.set_visible(False) # 关闭显示
        event.canvas.draw_idle()
        # save the point list to vect
        self.road_id = self.road_id + 1 # 增加一个新id
        self.road_id_list.append(self.road_id) # 添加到road_id_list
        self.ref_line_dict[self.road_id] = self.ref_line_list # 把 id:ref_line添加进地图字典
      
      if not self.get_ref_line_flag and len(self.ref_line_list)==0: # 选点开始
        self.ann.xy = (x,y)
        self.ann.set_visible(True)
        event.canvas.draw_idle()

      self.get_ref_line_flag = not self.get_ref_line_flag  # 每点击一次左键，flag翻转一次
    
    else: # 其他按键
      self.get_ref_line_flag = False
      self.ann.set_visible(False)
      event.canvas.draw_idle()
    
    return

  def onButtonRelease(self, event):
#    self.get_ref_line_flag = False
    return

  def onMotion(self, event):
    if self.get_ref_line_flag:
      print(event.xdata, event.ydata)
    return

  def connect(self):
    self.fig.canvas.mpl_connect('button_press_event', mm.onButtonPress)
    self.fig.canvas.mpl_connect('button_release_event', mm.onButtonRelease)
    self.fig.canvas.mpl_connect('motion_notify_event', mm.onMotion)
    return

"""##############################################
"""
if __name__ == "__main__":
  direct = "../data/GPS_info/"
  coordi_type = "gps_"
  namelist = ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']

  """
  # read data from files
  """
  filename = coordi_type + "a" + ".txt" + ".txt"
  data = np.loadtxt(direct+filename, delimiter='\t', usecols=[1,2])

  for alphabet in namelist:
    filename = coordi_type + alphabet + ".txt" + ".txt"
    try:
      data1=np.loadtxt(direct+filename, delimiter='\t', usecols=[1,2])
    except IOError:
      print("file open failed")
      break
    
    if(data1.size!=0):
      data = np.concatenate((data, data1), axis=0)
    else:
      print("%s is empty file!" %(filename))
    
    print("now loading {}".format(filename))
  
  """
  # transfer from gps to xyz
  """
  xyz_map = data*111000 # need modified

  """################################################################################
  " matplot
  """

  fig = plt.figure("basic_map")
  ax = fig.gca()
#  ax = fig.add_subplot(111)
  ref_line, = plt.plot(xyz_map[:,0], xyz_map[:,1], 'o', picker=5)

  mm = MapModify(fig)
  mm.connect()
  
  plt.show()
